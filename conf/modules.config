/*
========================================================================================
    CONFIG
========================================================================================
*/

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: "${params.publish_dir_mode}",
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withLabel: sequencing {
		container = "bahnk/sequencing:v1"
	}

    withLabel: python {
		container = "bahnk/python:v1"
	}

    withLabel: demultiplexing {
		publishDir = [
			path: { "${params.outdir}/files" },
			mode: "${params.publish_dir_mode}"
		]
	}

    withLabel: pucks {
		publishDir = [
            path: { "${params.outdir}/files/pucks" },
            mode: "${params.publish_dir_mode}",
            enabled: true
		]
	}

    withLabel: samtools {
		container = "bahnk/samtools:v1"
	}

    withName: UNTAR_STAR_INDEX {
        publishDir = [
            enabled: false
        ]
    }

    withName: FASTQC {
        publishDir = [
            path: { "${params.outdir}/qc/fastqc" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: TAG_BAM {
        publishDir = [
            path: { "${params.outdir}/files/tagged" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: READS_UP_MATCHING {
        ext.suffix = 'reads_up_matching'
        ext.script = 'reads_up_matching.py'
        publishDir = [
            path: { "${params.outdir}/qc/bam_metrics" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: BAM_FILTER_UP_MATCHED {
        ext.expr   = '[us]==\"MATCHED\" && [as]==\"MAPPED\"'
        ext.suffix = 'filtered'
        publishDir = [
            path: { "${params.outdir}/files/filtered" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: UMIS_PER_BARCODE {
        publishDir = [
            path: { "${params.outdir}/files/umi_per_bc" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: READS_UMIS_PER_BARCODE {
        ext.suffix = 'reads_umis_per_barcode'
        ext.script = 'reads_umis_per_barcode.py'
        publishDir = [
            path: { "${params.outdir}/qc/bam_metrics" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: READS_UMI_THRESHOLD {
        ext.suffix = 'reads_umi_threshold'
        ext.script = 'reads_umi_threshold.py'
        publishDir = [
            path: { "${params.outdir}/qc/bam_metrics" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: BAM_FILTER_UMI_THRESHOLD {
        ext.expr   = '[bt]==\"PASS\"'
        ext.suffix = 'umi_threshold_filt'
        publishDir = [
            path: { "${params.outdir}/files/filtered" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: GET_BARCODES {
        publishDir = [
            path: { "${params.outdir}/bc" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: HAMMING {
        // Cluster options
        cpus = { check_max( 8, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = 72.h

        queue = 'gpu'
        clusterOptions = "--gres=gpu:1"
        singularity.runOptions = '--nv'
    }

    withName: MATCHER {
        publishDir = [
            path: { "${params.outdir}/qc" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: ADD_MATCH {
        publishDir = [
            path: { "${params.outdir}/files" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: READS_BARCODE_MATCHING {
        ext.script = 'reads_barcode_matching.py'
        ext.suffix = 'reads_barcode_matching'
        publishDir = [
            path: { "${params.outdir}/qc/bam_metrics" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: BAM_FILTER_BARCODE_MATCHED {
        ext.expr   = '[bs]==\"MATCHED\"'
        ext.suffix = 'barcode_matched'
        publishDir = [
            path: { "${params.outdir}/files" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: HTSEQ {
        // Cluster options
        cpus = { check_max( 8, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = 72.h

        queue = 'gpu'
        clusterOptions = "--gres=gpu:1"
        singularity.runOptions = '--nv'

        publishDir = [
            path: { "${params.outdir}/genes/htseq" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: COUNT_GENE_TAGS {
        ext.script = 'count_gene_tags.py'
        ext.suffix = 'count_gene_tags'
        publishDir = [
            path: { "${params.outdir}/qc/bam_metrics" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: BAM_FILTER_GENE_TAGS {
        ext.expr   = "[XF]!~\"^__.+\""
        ext.suffix = 'gene_tags'
        publishDir = [
            path: { "${params.outdir}/files" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: COUNT_READS_PER_UMI {
        ext.script = 'reads_per_umi.py'
        ext.suffix = 'reads_per_umi'
        publishDir = [
            path: { "${params.outdir}/qc/bam_metrics" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: COUNT_READS_PER_UMI_GENE {
        ext.script = 'reads_per_umi_gene.py'
        ext.suffix = 'reads_per_umi_gene'
        publishDir = [
            path: { "${params.outdir}/qc/bam_metrics" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: SELECT {
        // Cluster options
        cpus = { check_max( 8, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = 72.h

        queue = 'gpu'
        clusterOptions = "--gres=gpu:1"
        singularity.runOptions = '--nv'
        
        ext.suffix = 'select'
        publishDir = [
            path: { "${params.outdir}/select" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: DUPLICATES {
        publishDir = [
            path: { "${params.outdir}/duplicates" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: COUNT_READS_PER_UMI_GENE {
        ext.script = 'count_select.py'
        ext.suffix = 'count_select'
        publishDir = [
            path: { "${params.outdir}/qc/bam_metrics" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: BAM_FILTER_MULTIMAPPED_UMIS {
        ext.expr   = "[cs]==\"UNIQUE\" || [cs]==\"INCLUDED\""
        ext.suffix = 'multimap_umis'
        publishDir = [
            path: { "${params.outdir}/files" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: BAM_METRICS_READS_PER_BARCODE_UMI {
        ext.script = 'reads_per_barcode_umi.py'
        ext.suffix = 'reads_per_barcode_umi'
        publishDir = [
            path: { "${params.outdir}/qc/bam_metrics" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: DGE {
        publishDir = [
            path: { "${params.outdir}/dge" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: MERGE_PLOTS {
        publishDir = [
            path: { "${params.outdir}/export" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: RENAME_COORDS {
        publishDir = [
            path: { "${params.outdir}/export" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }
}

/*
========================================================================================
    PLOTS
========================================================================================
*/

process {
    withLabel: plot {
		container = "bahnk/python:v1"
	}

    withName: PLOT_UP_MATCHING {
        ext.script = 'plot_up_matching.py'
        ext.args = ''
        ext.suffix = 'up_matching'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_BARCODE_EXTRACTION {
        ext.script = 'plot_barcode_extraction.py'
        ext.args = ''
        ext.suffix = 'up_matching'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_UP_ALIGN {
        ext.script = 'plot_up_align.py'
        ext.args = ''
        ext.suffix = 'up_align'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_UMI_THRESHOLD {
        ext.script = 'plot_umi_threshold.py'
        ext.args = ''
        ext.suffix = 'umi_threshold'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_HAMMING_HISTO {
        ext.script = 'plot_histo_hamming.py'
        ext.args = ''
        ext.suffix = 'histo_hamming'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_BARCODE_MATCHING {
        ext.script = 'plot_barcode_matching.py'
        ext.args = ''
        ext.suffix = 'barcode_matching'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_HISTO_ERROR {
        ext.script = 'plot_histo_errors.py'
        ext.args = ''
        ext.suffix = 'histo_errors'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_BARCODE_ALIGN {
        ext.script = 'plot_barcode_align.py'
        ext.args = ''
        ext.suffix = 'barcode_align'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_GENE_TAGS {
        ext.script = 'plot_gene_tags.py'
        ext.args = ''
        ext.suffix = 'gene_tags'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_SELECT {
        ext.script = 'plot_select.py'
        ext.args = ''
        ext.suffix = 'select'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_BALANCE_BARCODE {
        ext.script = 'plot_balance_barcode.py'
        ext.args = ''
        ext.suffix = 'balance_barcode'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_BALANCE_UMI {
        ext.script = 'plot_balance_umi.py'
        ext.args = ''
        ext.suffix = 'balance_umi'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_READS_FRACTION {
        ext.script = 'plot_reads_fraction.py'
        ext.args = ''
        ext.suffix = 'reads_fraction'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_HISTO_GENES {
        ext.script = 'plot_histo_genes.py'
        ext.args = ''
        ext.suffix = 'histo_genes'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_HISTO_UMIS {
        ext.script = 'plot_histo_umis.py'
        ext.args = ''
        ext.suffix = 'histo_umis'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_UMIS_PER_BARCODE {
        ext.script = 'plot_umis_per_barcode.py'
        ext.args = ''
        ext.suffix = 'umis_per_barcode'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }

    withName: PLOT_SPATIAL_UMIS {
        ext.script = 'plot_spatial_umi.py'
        ext.args = ''
        ext.suffix = 'spatial_umi'
        publishDir = [
            path: { "${params.outdir}/plots" },
            mode: "${params.publish_dir_mode}",
            enabled: true
        ]
    }
}
