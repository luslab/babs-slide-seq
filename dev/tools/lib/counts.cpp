/*
 * nourdine.bah@crick.ac.uk
 */

#include <string>
#include <fstream>

#include "gene.hpp"
#include "counts.hpp"

// ============================================================================
// Constructors
// ============================================================================

// ----------------------------------------------------------------------------
// Default constructor
// ----------------------------------------------------------------------------

Counts::Counts()
{
}

// ----------------------------------------------------------------------------
// Minimal constructor
// ----------------------------------------------------------------------------

Counts::Counts(Gene gene)
{
	this->counts = std::map<Gene, unsigned long long>();
	this->counts[gene]++;
}

// ============================================================================
// Getters
// ============================================================================

// ----------------------------------------------------------------------------
// GetCounts()
// ----------------------------------------------------------------------------

std::map<Gene, unsigned long long> Counts::GetCounts()
{
	return counts;
}

// ============================================================================
// Methods
// ============================================================================

// ----------------------------------------------------------------------------
// GetSize()
// ----------------------------------------------------------------------------

unsigned long long Counts::GetSize() const
{
	return (unsigned long long)counts.size();
}

// ----------------------------------------------------------------------------
// Increment()
// ----------------------------------------------------------------------------

void Counts::Increment(Gene gene)
{
	counts[gene]++;
}

// ----------------------------------------------------------------------------
// GetCount()
// ----------------------------------------------------------------------------

unsigned long long Counts::GetCount(Gene gene)
{
	return counts[gene];
}

// ============================================================================
// Operators
// ============================================================================

// ----------------------------------------------------------------------------
// ostream
// ----------------------------------------------------------------------------

std::ostream& operator<<(std::ostream& out, const Counts& counts)
{
	out << "(";
	unsigned long long i = 0;
	for (auto& [gene, count] : counts.counts)
	{
		out << gene << ": " << count;
		i++;
		if ( i < counts.counts.size() )
		{
			out << ", ";
		}
	}
	out << ")";
	return out;
}

// ============================================================================
// Iterators
// ============================================================================

// ----------------------------------------------------------------------------
// begin()
// ----------------------------------------------------------------------------

std::map<Gene, unsigned long long>::const_iterator Counts::begin() const
{
	return counts.begin();
}

// ----------------------------------------------------------------------------
// end()
// ----------------------------------------------------------------------------

std::map<Gene, unsigned long long>::const_iterator Counts::end() const
{
	return counts.begin();
}

